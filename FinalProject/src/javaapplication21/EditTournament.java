package javaapplication21;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import static javaapplication21.TournamentSimulator.parseNewCompetitor;
import static javaapplication21.TournamentSimulator.parseNewJudge;
import javax.swing.DefaultListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author katidid
 */
public class EditTournament extends javax.swing.JFrame {
    TourneyController controller = new TourneyController();
    /**
     * Creates new form EditTournament
     */
    public EditTournament() {
        initComponents();
        populateListBox();
        populateJudgeListBox();
        getContentPane().setBackground(Color.darkGray);
    }
    private void populateListBox()
    {
        File outFile = new File("/Users/katidid/desktop/COMPETITORS.txt");
        if (SelectListOfComps.getModel().getSize() == 0)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader(outFile))) 
            {
                String line = null;
                while ((line = reader.readLine()) != null) 
                {
                    Competitor newCompetitor = parseNewCompetitor(line);
                    
                    ((DefaultListModel)SelectListOfComps.getModel()).addElement(newCompetitor);    
                }
            } 
            catch (IOException x) 
            {
                System.err.format("IOException: %s%n", x);
            }
        }
    }
    private void populateJudgeListBox()
    {
        File outFile = new File("/Users/katidid/desktop/JUDGES.txt");
        
        if (SelectListOfJudges.getModel().getSize() == 0)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader(outFile))) 
            {
                String line = null;
                while ((line = reader.readLine()) != null) 
                {
                    Judge newJ = parseNewJudge(line);
                    
                    ((DefaultListModel)SelectListOfJudges.getModel()).addElement(newJ);
                    
                }
            } 
            catch (IOException x) 
            {
                System.err.format("IOException: %s%n", x);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ListOfCompetitors = new javax.swing.JScrollPane();
        SelectListOfComps = new javax.swing.JList();
        AddToTournament = new javax.swing.JButton();
        ListOfCompetitors1 = new javax.swing.JScrollPane();
        SelectListOfJudges = new javax.swing.JList();
        MessageLabel = new javax.swing.JLabel();
        AddedCompsPane = new javax.swing.JScrollPane();
        AddedComps = new javax.swing.JList();
        AddedCompsPane1 = new javax.swing.JScrollPane();
        AddedJudges = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SelectListOfComps.setModel(new DefaultListModel<Competitor>()
            {
                public int getSize(){
                    return controller.getNumComps();
                }
                public Competitor getElementAt(int i) {
                    return controller.getCompetitor(i);
                }
                public void addElement(Competitor e) {
                    super.addElement(e);
                    controller.addStu(e);
                }
                public void add(int i, Competitor e) {
                    super.add(i,e);
                    controller.addStu(e);
                }
            });
            ListOfCompetitors.setViewportView(SelectListOfComps);

            AddToTournament.setBackground(new java.awt.Color(255, 102, 102));
            AddToTournament.setText("Add Names to Tournament");
            AddToTournament.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    AddToTournamentActionPerformed(evt);
                }
            });

            SelectListOfJudges.setModel(new DefaultListModel<Judge>()
                {
                    public int getSize(){
                        return controller.getNumJudges();
                    }
                    public Judge getElementAt(int i) {
                        return controller.getJudge(i);
                    }
                    public void addElement(Judge e) {
                        super.addElement(e);
                        controller.addJudge(e);
                    }
                    public void add(int i, Judge e) {
                        super.add(i,e);
                        controller.addJudge(e);
                    }
                });
                ListOfCompetitors1.setViewportView(SelectListOfJudges);

                MessageLabel.setForeground(new java.awt.Color(255, 0, 0));
                MessageLabel.setText("MessageLabel");

                AddedComps.setModel(new DefaultListModel<Competitor>()
                    {
                        public void addElement(Competitor e) {
                            super.addElement(e);
                        }
                        public void add(int i, Competitor e) {
                            super.add(i,e);
                        }
                    });
                    AddedCompsPane.setViewportView(AddedComps);

                    AddedJudges.setModel(new DefaultListModel<Judge>()
                        {
                            public void addElement(Judge e) {
                                super.addElement(e);
                            }
                            public void add(int i, Judge e) {
                                super.add(i,e);
                            }
                        });
                        AddedCompsPane1.setViewportView(AddedJudges);

                        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                        getContentPane().setLayout(layout);
                        layout.setHorizontalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(110, 110, 110)
                                        .addComponent(MessageLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addComponent(AddToTournament, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(AddedCompsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(ListOfCompetitors, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ListOfCompetitors1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(AddedCompsPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                                .addContainerGap(187, Short.MAX_VALUE))
                        );
                        layout.setVerticalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(MessageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AddToTournament)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ListOfCompetitors1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ListOfCompetitors, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AddedCompsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AddedCompsPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(43, Short.MAX_VALUE))
                        );

                        pack();
                    }// </editor-fold>//GEN-END:initComponents

    private void AddToTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToTournamentActionPerformed
        ArrayList<Competitor> selectedComps = new ArrayList <Competitor>();
        int numSelections = SelectListOfComps.getSelectedIndices().length; // how many Competitors the user selected
        int[] selectedIndices = new int[numSelections]; // which ones were selected
        //MessageLabel.setText("" + numThings);
        for (int i = 0; i < numSelections; i++)
        {
            selectedIndices[i] =  SelectListOfComps.getSelectedIndices()[i]; // get which indices were selected
        }
        int whereSelectedIs;
        for (int i = 0; i < numSelections; i++)
        {
            whereSelectedIs = selectedIndices[i];
            Competitor newComp = (Competitor) SelectListOfComps.getModel().getElementAt(whereSelectedIs);
            selectedComps.add(newComp);
        }
//        for(int i = 0; i < selectedComps.size(); i++)
//        {
//            ((DefaultListModel)AddedComps.getModel()).addElement(selectedComps.get(i));
//        }
        File tourneyOutFile = new File("/Users/katidid/desktop/TOURNAMENT.txt");

          
        try
        {
            FileWriter writer = new FileWriter(tourneyOutFile, true);
            try
            {
                for (int i = 0; i < selectedComps.size(); i++)
                {
                    writer.write(selectedComps.get(i).toString() + "\n");
                    ((DefaultListModel)AddedComps.getModel()).addElement(selectedComps.get(i));
                }
            }
            catch(IOException ex)
            {
                MessageLabel.setText("Didn't output.");
            }
            writer.close();
        }
        catch(IOException ex)
        {
            MessageLabel.setText("Didn't make file");
        }
        
    }//GEN-LAST:event_AddToTournamentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditTournament.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditTournament.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditTournament.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditTournament.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditTournament().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddToTournament;
    private javax.swing.JList AddedComps;
    private javax.swing.JScrollPane AddedCompsPane;
    private javax.swing.JScrollPane AddedCompsPane1;
    private javax.swing.JList AddedJudges;
    private javax.swing.JScrollPane ListOfCompetitors;
    private javax.swing.JScrollPane ListOfCompetitors1;
    private javax.swing.JLabel MessageLabel;
    private javax.swing.JList SelectListOfComps;
    private javax.swing.JList SelectListOfJudges;
    // End of variables declaration//GEN-END:variables
}
